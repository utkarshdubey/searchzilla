{"version":3,"file":"searchzilla.umd.js","sources":["../src/search.ts"],"sourcesContent":["interface SearchOptions{\r\n    params: {\r\n        data: any,\r\n        exclude ? : any\r\n    }\r\n}\r\n\r\nexport class Search implements SearchOptions{\r\n    constructor(params: any){\r\n        this.params = params;\r\n        this.keys = [];\r\n        this.filteredData = [];\r\n        this.initialized = false;\r\n        this.stopwords;\r\n    }\r\n    data: any;\r\n    keys: Array<string>;\r\n    filteredData: Array<object>;\r\n    initialized: boolean;\r\n    params: any;\r\n    stopwords: any;\r\n    \r\n\r\n    init(...params){\r\n        // Conditions for empty/null input\r\n        if(!this.params.data) throw \"Undefined or null data provided.\";\r\n        if(!Object.keys(this.params.data).length) throw \"Can't search inside an empty variable\";\r\n\r\n        // Set initialized variable to be true\r\n        this.initialized = true;\r\n\r\n        // Setting stopwords\r\n        if(this.params.exclude){\r\n            this.stopwords = new Set(this.params.exclude);\r\n        }\r\n        // console.log(this.stopwords);\r\n\r\n        // **DEBUG**\r\n        // console.log(searchData);\r\n    }\r\n\r\n    add(...addKey: any){\r\n        // Conditions for empty/null input\r\n        if(!addKey) throw \"Key not provided\";\r\n\r\n        // Condition for uninitialized\r\n        if(!this.initialized) throw \"Class not initialized.\"\r\n\r\n        // Adding keys\r\n        addKey.forEach(key => {\r\n            this.keys.push(key);\r\n        })\r\n       \r\n    }\r\n\r\n    search(searchKey: string){\r\n        // Conditions for empty/null\r\n        if(!searchKey) throw \"Key not provided\";\r\n\r\n        // Condition for uninitialized\r\n        if(!this.initialized) throw \"Class not initialized.\"\r\n        // console.log(this.data, this.keys);\r\n\r\n        // Stopwords filtering function\r\n        const filterStopwords = (word: string) => {\r\n            if(this.stopwords.has(word)){\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Actual Search logic\r\n        this.params.data.filter(item => {\r\n            this.keys.forEach(key => {\r\n                const filteredItem = item[key].toLowerCase();\r\n                const filteredSearchKey = searchKey.toLowerCase();\r\n                // Stopwords filtering\r\n\r\n                if(filteredItem.includes(filteredSearchKey)){\r\n                    if(!this.stopwords){\r\n                        this.filteredData.push(item);\r\n                    }\r\n                    if(this.stopwords && !filterStopwords(filteredItem)){\r\n                        this.filteredData.push(item);\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        \r\n        return this.filteredData;\r\n\r\n    }\r\n}"],"names":["params","this","keys","filteredData","initialized","init","data","Object","length","exclude","stopwords","Set","add","addKey","forEach","key","_this","push","search","searchKey","filter","item","_this2","filteredItem","toLowerCase","filteredSearchKey","includes","has"],"mappings":"+MAQI,WAAYA,GACRC,KAAKD,OAASA,EACdC,KAAKC,KAAO,GACZD,KAAKE,aAAe,GACpBF,KAAKG,aAAc,EAL3B,2BAgBIC,KAAA,WAEI,IAAIJ,KAAKD,OAAOM,KAAM,KAAM,mCAC5B,IAAIC,OAAOL,KAAKD,KAAKD,OAAOM,MAAME,OAAQ,KAAM,wCAGhDP,KAAKG,aAAc,EAGhBH,KAAKD,OAAOS,UACXR,KAAKS,UAAY,IAAIC,IAAIV,KAAKD,OAAOS,aAQ7CG,IAAA,sBAAOC,2BAEH,IAAIA,EAAQ,KAAM,mBAGlB,IAAIZ,KAAKG,YAAa,KAAM,yBAG5BS,EAAOC,QAAQ,SAAAC,GACXC,EAAKd,KAAKe,KAAKF,QAKvBG,OAAA,SAAOC,cAEH,IAAIA,EAAW,KAAM,mBAGrB,IAAIlB,KAAKG,YAAa,KAAM,yBA6B5B,OAjBAH,KAAKD,OAAOM,KAAKc,OAAO,SAAAC,GACpBC,EAAKpB,KAAKY,QAAQ,SAAAC,GACd,IAAMQ,EAAeF,EAAKN,GAAKS,cACzBC,EAAoBN,EAAUK,cAGjCD,EAAaG,SAASD,KACjBH,EAAKZ,WACLY,EAAKnB,aAAac,KAAKI,GAExBC,EAAKZ,YAjBbY,EAAKZ,UAAUiB,IAiB4BJ,IAClCD,EAAKnB,aAAac,KAAKI,aAM3BlB"}